plugins {
    id 'java-library'
    id 'application'
    id 'io.qameta.allure' version '2.9.6'
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

group 'cloud.autotests'
version '1.0'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
def allureVersion = "2.24.0"
defaultTasks 'help'

ext {
    allureVersion = "2.24.0"
    selenideVersion = "6.19.1"
    junitVersion = "5.10.1"
    seleniumVersion = "4.13.0"
}

configurations {
    testCompile
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'junit:junit:4.13.2'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.checkerframework:checker:3.38.0'

    testImplementation(
            "io.qameta.allure:allure-selenide:${allureVersion}",
            "io.qameta.allure:allure-java-commons:${allureVersion}",
            "io.github.bonigarcia:webdrivermanager:5.5.3",
            "org.aspectj:aspectjweaver:1.9.21",
            "com.codeborne:selenide:${selenideVersion}",
            "org.seleniumhq.selenium:selenium-java:${seleniumVersion}",
            "io.rest-assured:rest-assured:5.3.2",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:2.15.3",
            "io.appium:java-client:8.5.1",
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

}

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties += System.properties
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    if (System.hasProperty("web_threads")) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("web_threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform {
        systemProperty 'junit.jupiter.execution.order.default', 'OrderAnnotation'
    }

}

task categories(type: Test) {
    useJUnitPlatform {
        includeTags 'categories'
    }
    systemProperty 'platform', 'web'
}

task onetest(type: Test) {
    useJUnitPlatform {
        includeTags 'onetest'
    }
    systemProperty 'platform', 'web'
}

task newAddress(type: Test) {
    useJUnitPlatform {
        includeTags 'newAddress'
    }
    systemProperty 'platform', 'web'
}

task newPayCard(type: Test) {
    useJUnitPlatform {
        includeTags 'newPayCard'
    }
    systemProperty 'platform', 'web'
}

task editProfile(type: Test) {
    useJUnitPlatform {
        includeTags 'editProfile'
    }
    systemProperty 'platform', 'web'
}

task emptySearch(type: Test) {
    useJUnitPlatform {
        includeTags 'emptySearch'
    }
    systemProperty 'platform', 'web'
}

task login(type: Test) {
    useJUnitPlatform {
        includeTags 'login'
    }
    systemProperty 'platform', 'web'
}

task signup(type: Test) {
    useJUnitPlatform {
        includeTags 'signup'
    }
    systemProperty 'platform', 'web'
}

task logout(type: Test) {
    useJUnitPlatform {
        includeTags 'logout'
    }
    systemProperty 'platform', 'web'
}

task order(type: Test) {
    useJUnitPlatform {
        includeTags 'order'
    }
    systemProperty 'platform', 'web'
}

task pickLocation(type: Test) {
    useJUnitPlatform {
        includeTags 'pickLocation'
    }
    systemProperty 'platform', 'web'
}

task smoke(type: Test) {
    useJUnitPlatform {
        includeTags 'smoke'
    }
    systemProperty 'platform', 'web'
}

task negativeTesting(type: Test) {
    useJUnitPlatform {
        includeTags 'negativeTesting'
    }
    systemProperty 'platform', 'web'
}

